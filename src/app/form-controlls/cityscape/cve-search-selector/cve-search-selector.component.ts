import {Component, ComponentRef, EventEmitter, Input, OnInit, Output} from '@angular/core';
import {CommandNavigatorService} from '../../../services/system/sofia/command-navigator.service';
import * as uuid from 'uuid';
import {CommandParserService} from '../../../services/system/sofia/command-parser.service';
import {ComponentPersistEntityFieldDTO} from '../../../dtos/sofia/component/component-persist-entity-field-dto';
import {ComponentDTO} from '../../../dtos/sofia/component/componentDTO';
import {ComponentPersistEntityDTO} from '../../../dtos/sofia/component/component-persist-entity-dto';

// declare function nativeFieldEventsHandler(entityCode: string, fieldName: string, eventtype: string, event: any): any;

@Component({
  selector: 'app-cve-search-selector',
  templateUrl: './cve-search-selector.component.html',
  styleUrls: ['./cve-search-selector.component.css']
})
export class CveSearchSelectorComponent implements OnInit {
  @Input() command: string;
  @Input() value: string;
  @Output() valueChange = new EventEmitter<string>();
  @Output() keyDownChange: EventEmitter<any> = new EventEmitter<any>();
  @Input() fieldClass: any;
  private uuid = '';
  refreshComponentCode = '';
  componentPersistEntityFieldList: ComponentPersistEntityFieldDTO[] = [];
  @Input() component: ComponentDTO;
  @Input() lineComponentPersistEntity: ComponentPersistEntityDTO = null;
  componentPersistEntity: ComponentPersistEntityDTO;
  @Input() editable: Boolean;
  @Input() componentPersistEntityDTO: ComponentPersistEntityDTO;
  @Input() componentPersistEntityFieldDTO: ComponentPersistEntityFieldDTO;
  @Output() focusEvent = new EventEmitter<FocusEvent>();
  componentPersistEntityList: ComponentPersistEntityDTO[];
  @Output() eventOccured = new EventEmitter<any>();

  constructor(
    private commandParserService: CommandParserService,
    private commandNavigatorService: CommandNavigatorService) {
  }

  ngOnInit(): void {
    this.uuid = uuid.v4();
    this.defineCurrentPersistEntityList();
  }

  /*
   * This function returns the componentPersistEntity list for this List Selector
   * ex. If this list selector is on a form table, the componentPersistEntity is not the general one
   * But the one with selection of its table line components
   * */
  private defineComponentPersistEntityList(): ComponentPersistEntityDTO[] {
    if (this.lineComponentPersistEntity == null) {
      return this.component.componentPersistEntityList;
    }
    return this.defineComponentPersistEntityListFromTree(this.component.componentPersistEntityList);
  }

  private defineComponentPersistEntityListFromTree(cpeList: ComponentPersistEntityDTO[]): ComponentPersistEntityDTO[] {
    if (cpeList == null) {
      return null;
    }

    let lineUpdated = false;
    const newCpeList: ComponentPersistEntityDTO[] = [];

    cpeList
      .forEach(cpe => {
        if (cpe.id === this.lineComponentPersistEntity.id) {
          lineUpdated = true;
          cpe.componentPersistEntityList = this.lineComponentPersistEntity.componentPersistEntityList;
          cpe.componentPersistEntityFieldList = this.lineComponentPersistEntity.componentPersistEntityFieldList;
          newCpeList.push(cpe);
        } else {
          newCpeList.push(cpe);
        }
      });

    if (lineUpdated) {
      return newCpeList;
    }

    newCpeList
      .forEach(newCpe => {
        const childCpeList = this.defineComponentPersistEntityListFromTree(newCpe.componentPersistEntityList);
        newCpe.componentPersistEntityList = childCpeList;
      });

    return newCpeList;
  }

  defineCurrentPersistEntityList(): void {
    this.componentPersistEntityList = this.defineComponentPersistEntityList();
  }

  openList() {
    const command = this.updateFieldValuesOnCommand(this.componentPersistEntityList, this.command);
    const componentRefOnNavigation: ComponentRef<any> = this.commandNavigatorService.navigate(command);
    componentRefOnNavigation.instance.setPresetCommand(command);
    componentRefOnNavigation.instance.selectEmmiter.subscribe((returningValues: string[]) => {
        this.value = returningValues['RETURN'];
        this.valueChange.emit(this.value);
        this.eventOccuredActions('listselected', null);
      }
    );
  }

  keyOpenPage(event: KeyboardEvent) {
    if (event.key === 'Enter') {
      this.openList();
      document.getElementById(this.uuid).click();
    }
  }

  onKeyDown($event: KeyboardEvent) {
    this.keyDownChange.emit($event);
  }

  clear() {
    this.value = null;
    this.componentPersistEntityFieldList = [];
    this.value = '';
    this.valueChange.emit(this.value);
    this.eventOccuredActions('listcleared', null);
  }

  findPersistEntityOnListTree(componentPersistEntityList: ComponentPersistEntityDTO[], code: string) {
    componentPersistEntityList.forEach(componentPersistEntity => {

      if (componentPersistEntity.code === code) {
        this.componentPersistEntity = componentPersistEntity;
        return true;
      }

      if (componentPersistEntity.componentPersistEntityList != null) {
        const found = this.findPersistEntityOnListTree(componentPersistEntity.componentPersistEntityList, code);

        if (found) {
          return found;
        }
      }

    });
    return false;
  }

  private retrieveDisplayFieldsOnTree(componentPersistEntityList: ComponentPersistEntityDTO[], displayFieldName: string): boolean {
    componentPersistEntityList
      .forEach(componentPersistEntity => {
        componentPersistEntity.componentPersistEntityFieldList
          .forEach(cpef => {
            const currentfield = componentPersistEntity.code + '.' + cpef.code;
            if (displayFieldName === currentfield) {
              this.componentPersistEntityFieldList.push(cpef);
              return true;
            }
          });
        if (componentPersistEntity.componentPersistEntityList != null) {
          const found = this.retrieveDisplayFieldsOnTree(componentPersistEntity.componentPersistEntityList, displayFieldName);
          if (found === true) {
            return true;
          }
        }
      });
    return false;
  }

  private updateFieldValuesOnCommand(componentPersistEntityList: ComponentPersistEntityDTO[], command: string): string {
    componentPersistEntityList
      .forEach(cpe => {
        cpe.componentPersistEntityFieldList
          .forEach(cpef => {
            const currentfield = '#' + cpe.code + '.' + cpef.code + '#';
            command = command.replace(currentfield, cpef.value);
          });
        if (cpe.componentPersistEntityList != null) {
          command = this.updateFieldValuesOnCommand(cpe.componentPersistEntityList, command);
        }
      });
    return command;
  }


  eventOccuredActions(eventtype: string, event: any) {
    this.eventOccured.emit(
      {
        entityCode: this.componentPersistEntityDTO.code,
        fieldCode: this.componentPersistEntityFieldDTO.code,
        eventtype: eventtype,
        event: event
      }
    );
  }

  focusTriggered($event: FocusEvent) {
    this.focusEvent.emit($event);
  }

}
